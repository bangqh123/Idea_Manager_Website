{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Web\\\\FrontEnd\\\\src\\\\contexts\\\\CommentContext.js\",\n  _s = $RefreshSig$();\nimport React, { useReducer, createContext } from \"react\";\nimport { CommentReducer } from '../reducers/CommentReducer';\nimport axios from \"axios\";\nimport { apiUrl, LOCAL_STORAGE_TOKEN_NAME } from './constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CommentContext = /*#__PURE__*/createContext();\nconst CommentContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [CommentState, dispatch] = useReducer(CommentReducer, {\n    Comments: [],\n    Comment: '',\n    Comments_by_user: [],\n    commentLoading: true\n  });\n\n  //Get all comments\n  const getAllComments = async () => {\n    try {\n      const response = await axios.get(`${apiUrl}/comments`);\n      if (response.data) {\n        console.log(\"data luu payload\", response.data);\n        dispatch({\n          type: 'COMMENTS_LOAD_SUCCESS',\n          payload: response.data\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: 'COMMENTS_LOAD_FAIL'\n      });\n    }\n  };\n\n  //add a new Comment\n  const addNewComment = async (comment, id) => {\n    try {\n      let token = localStorage.getItem(LOCAL_STORAGE_TOKEN_NAME);\n      console.log(\"comment:\", comment);\n      const response = await axios.post(`${apiUrl}/blogs/` + id + `/comments/create`, {\n        comment\n      }, {\n        headers: {\n          \"Authorization\": token\n        }\n      });\n      console.log(\"data a new Comment\", response.data);\n      return response.data;\n    } catch (error) {\n      console.log('error', error);\n    }\n  };\n\n  //get a Comment by category id\n  const getCommentByBlogId = async _id => {\n    const response = await axios.get(`${apiUrl}/blogs/` + _id + `/comments`);\n    console.log(\"Comment by blog: \", response.data.data.comments);\n    if (response.data.data.comments) {\n      dispatch({\n        type: 'COMMENTS_LOAD_SUCCESS',\n        payload: response.data.data.comments\n      });\n    }\n  };\n  const DeleteComment = async _id => {\n    let token = localStorage.getItem(LOCAL_STORAGE_TOKEN_NAME);\n    const response = await axios.delete(`${apiUrl}/comments/` + _id + `/delete`, {\n      headers: {\n        \"Authorization\": token\n      }\n    });\n    console.log(\"delete comment: \", response.data);\n    return response.data;\n  };\n  const blog_like = async id => {\n    let token = localStorage.getItem(LOCAL_STORAGE_TOKEN_NAME);\n    console.log(\"token : \", token);\n    const response = await axios.post(`${apiUrl}/blogs/` + id + `/toggle_like`, {}, {\n      headers: {\n        \"Authorization\": token\n      }\n    });\n    console.log(\"blog like: \", response.data);\n  };\n  const CommentContextData = {\n    CommentState,\n    getAllComments,\n    addNewComment,\n    getCommentByBlogId,\n    DeleteComment,\n    blog_like\n  };\n  return /*#__PURE__*/_jsxDEV(CommentContext.Provider, {\n    value: CommentContextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n_s(CommentContextProvider, \"7TfMnQwBmZQi6WbK+3kzp3bOSP8=\");\n_c = CommentContextProvider;\nexport default CommentContextProvider;\nvar _c;\n$RefreshReg$(_c, \"CommentContextProvider\");","map":{"version":3,"names":["React","useReducer","createContext","CommentReducer","axios","apiUrl","LOCAL_STORAGE_TOKEN_NAME","jsxDEV","_jsxDEV","CommentContext","CommentContextProvider","_ref","_s","children","CommentState","dispatch","Comments","Comment","Comments_by_user","commentLoading","getAllComments","response","get","data","console","log","type","payload","error","addNewComment","comment","id","token","localStorage","getItem","post","headers","getCommentByBlogId","_id","comments","DeleteComment","delete","blog_like","CommentContextData","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/Web/FrontEnd/src/contexts/CommentContext.js"],"sourcesContent":["import React, { useReducer, createContext } from \"react\"\nimport { CommentReducer } from '../reducers/CommentReducer';\nimport axios from \"axios\";\nimport { apiUrl, LOCAL_STORAGE_TOKEN_NAME } from './constants';\n\n\nexport const CommentContext = createContext()\nconst CommentContextProvider = ({ children }) => {\n    const [CommentState, dispatch] = useReducer(CommentReducer, {\n        Comments: [],\n        Comment: '',\n        Comments_by_user: [],\n        commentLoading: true\n    })\n\n    //Get all comments\n    const getAllComments = async () => {\n        try {\n            const response = await axios.get(`${apiUrl}/comments`)\n            if (response.data) {\n                console.log(\"data luu payload\", response.data)\n                dispatch({ type: 'COMMENTS_LOAD_SUCCESS', payload: response.data })\n            }\n        } catch (error) {\n            dispatch({ type: 'COMMENTS_LOAD_FAIL' })\n        }\n    }\n\n    //add a new Comment\n    const addNewComment = async (comment, id) => {\n        try {\n            let token = localStorage.getItem(LOCAL_STORAGE_TOKEN_NAME)\n            console.log(\"comment:\", comment)\n            const response = await axios.post(`${apiUrl}/blogs/` + id + `/comments/create`, { comment }, {\n\n                headers: {\n                    \"Authorization\": token\n                }\n            })\n            console.log(\"data a new Comment\", response.data)\n            return response.data\n        } catch (error) {\n            console.log('error', error)\n        }\n    }\n\n    //get a Comment by category id\n    const getCommentByBlogId = async (_id) => {\n        const response = await axios.get(`${apiUrl}/blogs/` + _id + `/comments`)\n        console.log(\"Comment by blog: \", response.data.data.comments)\n        if (response.data.data.comments) {\n            dispatch({ type: 'COMMENTS_LOAD_SUCCESS', payload: response.data.data.comments })\n        }\n\n    }\n\n    const DeleteComment = async (_id) => {\n        let token = localStorage.getItem(LOCAL_STORAGE_TOKEN_NAME)\n        const response = await axios.delete(`${apiUrl}/comments/` + _id + `/delete`, {\n\n            headers: {\n                \"Authorization\": token\n            }\n        })\n        console.log(\"delete comment: \", response.data)\n        return response.data\n    }\n\n    const blog_like = async (id) => {\n        let token = localStorage.getItem(LOCAL_STORAGE_TOKEN_NAME)\n        console.log(\"token : \", token)\n        const response = await axios.post(`${apiUrl}/blogs/` + id + `/toggle_like`, {}, {\n\n            headers: {\n                \"Authorization\": token\n            }\n        })\n        console.log(\"blog like: \", response.data)\n    }\n\n    const CommentContextData = { CommentState, getAllComments, addNewComment, getCommentByBlogId, DeleteComment, blog_like }\n\n    return (\n        <CommentContext.Provider value={CommentContextData} >\n            {children}\n        </CommentContext.Provider>\n    )\n}\n\nexport default CommentContextProvider"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}